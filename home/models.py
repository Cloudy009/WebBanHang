from datetime import datetime
from time import timezone
from django.db import models
from django.db.models import UniqueConstraint

# from django.contrib.auth.models import User
from django.conf import settings
import pytz

from django.db.models.signals import post_save
from django.dispatch import receiver

class UserProfile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    email = models.EmailField(max_length=50, blank=True, null=True)  # Email ri√™ng

    first_name = models.CharField(max_length=30, blank=True, null=True)  # First name
    last_name = models.CharField(max_length=30, blank=True, null=True)   # Last name
    phone_number = models.CharField(max_length=15, blank=True, null=True)  # Phone number
    address = models.CharField(max_length=255, blank=True, null=True)    # Address
    city = models.CharField(max_length=100, blank=True, null=True)       # City field
    zip = models.CharField(max_length=20, blank=True, null=True)         # ZIP code
    country = models.CharField(max_length=100, blank=True, null=True)    # Country
    date_of_birth = models.DateField(null=True, blank=True)              # Date of birth
    is_primary = models.BooleanField(default=False)                      # Default address checkbox

    def __str__(self):
        return self.user.username

class Category(models.Model):
    cate_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=50)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    image_cat = models.CharField(max_length=200)
    detail = models.TextField(null=True, blank=True)
    def __str__(self):
        return self.name
    
class Product(models.Model):
    pro_id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=200)
    original_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)  # Gi√° g·ªëc
    stock = models.PositiveIntegerField(default=0)  # S·ªë l∆∞·ª£ng t·ªìn kho
    sku = models.CharField(max_length=50, unique=True, null=True, blank=True)  # M√£ SKU
    tags = models.CharField(max_length=200, null=True, blank=True)  # C√°c th·∫ª li√™n quan
    description = models.TextField(null=True, blank=True)  # M√¥ t·∫£ s·∫£n ph·∫©m
    material = models.TextField(null=True, blank=True)  # Ch·∫•t li·ªáu
    storage_instruction = models.TextField(null=True, blank=True)  # H∆∞·ªõng d·∫´n b·∫£o qu·∫£n
    details = models.TextField(null=True, blank=True)  # Chi ti·∫øt s·∫£n ph·∫©m
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    categories = models.TextField(null=True, blank=True)  # C√°c danh m·ª•c li√™n quan
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    image_pro = models.CharField(max_length=200, null=True, blank=True)
    is_active = models.BooleanField(default=True)  # Tr·∫°ng th√°i s·∫£n ph·∫©m

    def __str__(self):
        return self.title
    class Meta:
        db_table = 'home_product'

class Like(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        constraints = [
            UniqueConstraint(fields=['user', 'product'], name='unique_user_product_like')
        ]


class ProductSize(models.Model):
    SIZE_CHOICES = [
        ('S', 'S'),
        ('M', 'M'),
        ('L', 'L'),
        ('XL', 'XL'),
        ('XXL', 'XXL'),
    ]
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    size = models.CharField(max_length=5, choices=SIZE_CHOICES)
    price = models.IntegerField()

    def __str__(self):
        return f"{self.product.title} - {self.get_size_display()} - {self.price} VND"
    
    class Meta:
        db_table = 'home_productsize'
        unique_together = ('product', 'size')

class ProductImage(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    image = models.CharField(max_length=200)

    def __str__(self):
        return f"{self.product.title} - {self.image}"
    class Meta:
        db_table = 'home_productimage'

class CartItem(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    size = models.CharField(max_length=5, choices=ProductSize.SIZE_CHOICES, default='S')
    quantity = models.PositiveIntegerField(default=1)
    sugar = models.CharField(max_length=10, choices=[('low', '√çt'), ('normal', 'B√¨nh th∆∞·ªùng'), ('high', 'Nhi·ªÅu')], default='normal')
    tea = models.CharField(max_length=10, choices=[('low', '√çt'), ('normal', 'B√¨nh th∆∞·ªùng'), ('high', 'Nhi·ªÅu')], default='normal')
    ice = models.CharField(max_length=10, choices=[('low', '√çt'), ('normal', 'B√¨nh th∆∞·ªùng'), ('high', 'Nhi·ªÅu')], default='normal')

    def __str__(self):
        return f"{self.user.username} - {self.product.title} - {self.size}"
        
    class Meta:
        db_table = 'home_cartitem'
        unique_together = ('user', 'product', 'size') 

class Voucher(models.Model):
    code = models.CharField(max_length=50, unique=True)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2)
    min_spend = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    expiration_date = models.DateTimeField(null=True, blank=True)
    is_active = models.BooleanField(default=True)

    def is_valid(self):
        """Check if the voucher is valid."""
        if not self.is_active:
            return False
        # ƒê·∫£m b·∫£o r·∫±ng datetime.now() c√≥ m√∫i gi·ªù
        now = datetime.now(pytz.utc)  # Ho·∫∑c m√∫i gi·ªù t∆∞∆°ng ·ª©ng n·∫øu c·∫ßn
        if self.expiration_date and self.expiration_date < now:
            return False
        return True
    
    def __str__(self):
        return f"{self.code} - ${self.discount_amount}"


class HoaDon(models.Model):
    maHoaDon = models.AutoField(primary_key=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    tongTien = models.DecimalField(max_digits=10, decimal_places=2)
    email = models.EmailField(max_length=50)
    diaChi = models.CharField(max_length=255)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    ORDER_STATUS_CHOICES = [
        ('pending', 'Ch·ªù x√°c nh·∫≠n'),
        ('processing', 'ƒêang chu·∫©n b·ªã'),
        ('shipped', 'ƒêang giao h√†ng'),
        ('delivered', 'ƒê√£ giao h√†ng'),
        ('cancelled', 'ƒê√£ h·ªßy'),
        ('failed', 'Th·∫•t b·∫°i')
    ]
    status = models.CharField(max_length=20, choices=ORDER_STATUS_CHOICES, default='pending')

    PAYMENT_METHOD_CHOICES = [
        ('credit', 'Th·∫ª t√≠n d·ª•ng/Ghi n·ª£'),
        ('paypal', 'Paypal'),
        ('cod', 'Thanh to√°n khi nh·∫≠n h√†ng'),
    ]
    payment_method = models.CharField(max_length=10, choices=PAYMENT_METHOD_CHOICES, default='cod')

    voucher = models.ForeignKey(Voucher, null=True, blank=True, on_delete=models.SET_NULL)

    is_received = models.BooleanField(default=False)
    def get_shipping_steps(self):
        """Tr·∫£ v·ªÅ s·ªë b∆∞·ªõc v·∫≠n chuy·ªÉn"""
        return self.events.count()

    def __str__(self):
        return f"#{self.maHoaDon} - {self.user.username} - {self.get_status_display()}"

    class Meta:
        db_table = 'home_hoadon'

class OrderEvent(models.Model):
    maEvent = models.AutoField(primary_key=True)
    order = models.ForeignKey(HoaDon, on_delete=models.CASCADE, related_name="events")
    time = models.DateTimeField(auto_now_add=True)  # T·ª± ƒë·ªông l·∫•y th·ªùi gian
    location = models.CharField(max_length=255, blank=True, null=True)  # ƒê·ªãa ƒëi·ªÉm giao h√†ng

    ORDER_STATUS_CHOICES = [
        ('pending', 'Ch·ªù x√°c nh·∫≠n'),
        ('processing', 'ƒêang chu·∫©n b·ªã'),
        ('shipped', 'ƒêang giao h√†ng'),
        ('delivered', 'ƒê√£ giao h√†ng'),
        ('cancelled', 'ƒê√£ h·ªßy'),
        ('failed', 'Th·∫•t b·∫°i')
    ]
    status = models.CharField(max_length=20, choices=ORDER_STATUS_CHOICES, default='pending')

    class Meta:
        db_table = 'home_orderevent'
        ordering = ['time']

    def __str__(self):
        return f"ƒê∆°n h√†ng {self.order.maHoaDon} - {self.get_status_display()}"

# üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n khi c√≥ s·ª± ki·ªán m·ªõi
@receiver(post_save, sender=OrderEvent)
def update_order_status(sender, instance, **kwargs):
    instance.order.status = instance.status
    instance.order.save()


class Detail(models.Model):
    hoaDon = models.ForeignKey(HoaDon, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    size = models.CharField(max_length=5, choices=ProductSize.SIZE_CHOICES, default='S')    
    quantity = models.PositiveIntegerField(default=1)
    sugar = models.CharField(max_length=50, null=True, blank=True)  # Th√¥ng tin v·ªÅ ƒë∆∞·ªùng
    ice = models.CharField(max_length=50, null=True, blank=True)  # Th√¥ng tin v·ªÅ ƒë√°
    tea = models.CharField(max_length=50, null=True, blank=True)  # Th√¥ng tin v·ªÅ ng·ªçt


    def __str__(self):
        return f"{self.hoaDon} - {self.product.title} - Size: {self.size}"
    
    class Meta:
        db_table = 'home_detail'
        unique_together = ('hoaDon', 'product', 'size')

class Feedback(models.Model):
    mess_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    email = models.EmailField(max_length=50)
    phone_number = models.IntegerField()
    message = models.TextField()
    time = models.DateTimeField(auto_now_add = True)
    def __str__(self):
        return f"{self.user.username} - {self.user.email}"
    
    class Meta:
        db_table = 'home_feedback'

class Review(models.Model):
    hoadon = models.ForeignKey(HoaDon, on_delete = models.CASCADE)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    detail = models.ForeignKey(Detail, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)  # Th√™m li√™n k·∫øt v·ªõi Product
    rate = models.IntegerField()
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add = True)
    # size = models.CharField(max_length=100, null=True, blank=True)  # Th√™m tr∆∞·ªùng size


    def __str__(self):
        return f"{self.user.username} - {self.product.title} - {self.created_at}"

    class Meta:
        db_table = 'home_review'

from django.db import models
from django.utils import timezone

class Policy(models.Model):
    POLICY_TYPES = [
        ('return', 'Ch√≠nh s√°ch ƒë·ªïi/tr·∫£'),
        ('delivery', 'Ch√≠nh s√°ch giao h√†ng'),
        ('payment', 'Ch√≠nh s√°ch thanh to√°n'),
        ('privacy', 'Ch√≠nh s√°ch b·∫£o m·∫≠t th√¥ng tin'),
        ('storage', 'Ch√≠nh s√°ch b·∫£o qu·∫£n th·ª±c ph·∫©m'),
        ('promotion', 'Ch√≠nh s√°ch khuy·∫øn m√£i'),
        ('cancel', 'Ch√≠nh s√°ch h·ªßy ƒë∆°n h√†ng'),
    ]

    type = models.CharField(max_length=20, choices=POLICY_TYPES, unique=True)
    title = models.CharField(max_length=255)
    content = models.TextField()
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.title

class ShopInfo(models.Model):
    name = models.CharField(max_length=255)
    address = models.TextField()
    phone = models.CharField(max_length=20)
    open_time = models.TimeField()
    close_time = models.TimeField()
    website = models.URLField()
    is_open_weekend = models.BooleanField(default=True)
    ship_available = models.BooleanField(default=True)
    email = models.EmailField(max_length=50)
    zalo_link = models.URLField()
    facebook_link = models.URLField()
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)
    def __str__(self):
        return self.name