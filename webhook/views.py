# webhook/views.py
import json
import re
from django.utils import timezone
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from home.models import CartItem, Category, Product, HoaDon, Detail, ProductSize, Policy, ShopInfo  # Import model t·ª´ app home
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.core.exceptions import ObjectDoesNotExist
User = get_user_model()

def checkProduct(product_name):
    """Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa s·∫£n ph·∫©m trong c∆° s·ªü d·ªØ li·ªáu"""
    return Product.objects.filter(title__icontains=product_name)

# TH√îNG TIN S·∫¢N PH·∫®M

def checkProduct_custom(product_name):
    product = Product.objects.filter(title__icontains=product_name).first()
    if not product:
        normalized_input = normalize_product_name(product_name)
        words = normalized_input.split()  # T√°ch t·ª´ theo kho·∫£ng tr·∫Øng
        max_words = 6  # T·ªëi ƒëa 6 t·ª´
        matched_products = None
        matched_products_2 = None

        # Ki·ªÉm tra l·∫ßn l∆∞·ª£t t·ª´ t·ªï h·ª£p 3 t·ª´, r·ªìi th√™m v√†o t·ª´ th·ª© 4, th·ª© 5, ... n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
        for i in range(3, min(max_words + 1, len(words) + 1)):
            search_term = " ".join(words[:i])  # T·∫°o t·ªï h·ª£p t√¨m ki·∫øm
            matched_products = Product.objects.filter(title__icontains=search_term)

            if matched_products.exists():
                product = matched_products.first()
                break  # N·∫øu c√≥ k·∫øt qu·∫£, tho√°t kh·ªèi v√≤ng l·∫∑p

        # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ v·ªõi matched_products_2 (s·ª≠ d·ª•ng thay th·∫ø 'y' b·∫±ng 'i')
        if not matched_products or not matched_products.exists():
            normalized_input_2 = replace_y_with_i(normalized_input)
            words_2 = normalized_input_2.split()  # T√°ch t·ª´ c·ªßa normalized_input_2
            for i in range(3, min(max_words + 1, len(words_2) + 1)):
                search_term_2 = " ".join(words_2[:i])  # T·∫°o t·ªï h·ª£p t√¨m ki·∫øm cho matched_products_2
                matched_products_2 = Product.objects.filter(title__icontains=search_term_2)
                if matched_products_2.exists():
                    product = matched_products_2.first()
                    break  # N·∫øu c√≥ k·∫øt qu·∫£, tho√°t kh·ªèi v√≤ng l·∫∑p
    return product



#L·∫§Y T·∫§T C·∫¢ TH√îNG TIN
#C√¢u test: print(get_product_details("list"))
def get_product_details(product_name):
    response_text = ""
    if not product_name:
        response_text += "B·∫°n ch∆∞a cung c·∫•p t√™n s·∫£n ph·∫©m."
    else:
        for name in product_name:
            print("T√™n s·∫£n ph·∫©m:", name)
            if not product_name:
                response_text += "B·∫°n ch∆∞a cung c·∫•p t√™n s·∫£n ph·∫©m."

            product = checkProduct_custom(name)
            if not product:
                response_text += f"S·∫£n ph·∫©m {name} kh√¥ng t√¨m th·∫•y."
            else:
                sizes = ProductSize.objects.filter(product=product)

                # Ki·ªÉm tra th√¥ng tin k√≠ch c·ª°
                if not sizes.exists():
                    response_text +=  f"Th√¥ng tin s·∫£n ph·∫©m: {product.title}. Hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ k√≠ch c·ª° v√† gi√° c·∫£."

                # Th√¥ng tin k√≠ch c·ª° v√† gi√°
                size_info = "\n".join([f"- Size {size.size}: {size.price} VNƒê" for size in sizes])

                # B·ªï sung c√°c th√¥ng tin kh√°c t·ª´ model Product
                response_text += f"""
                üè∑Ô∏è Th√¥ng tin s·∫£n ph·∫©m: {product.title}:
                üìù - M√¥ t·∫£: {product.description or 'Ch∆∞a c√≥ m√¥ t·∫£'}
                üßµ - Ch·∫•t li·ªáu: {product.material or 'Ch∆∞a c√≥ th√¥ng tin v·ªÅ ch·∫•t li·ªáu'}
                üí≤ - Chi ti·∫øt size - gi√°: {size_info}
                """
    return response_text


#L·∫§Y GI√Å S·∫¢N 

#C√¢u test: print(get_product_price("B√°nh m·ª≥ ch√£ c√°"))
def get_product_price(product_name):
    response_text = ""
    if not product_name:
        response_text += "B·∫°n ch∆∞a cung c·∫•p t√™n s·∫£n ph·∫©m."
    else:
        response_text +=  f" M√¨nh g·ª≠i b·∫°n gi√° c√°c s·∫£n ph·∫©m b√™n m√¨nh nha: \n"
        for name in product_name:
            if not product_name:
                response_text += "B·∫°n ch∆∞a cung c·∫•p t√™n s·∫£n ph·∫©m."

            product = checkProduct_custom(name)
            if not product:
                response_text += f"S·∫£n ph·∫©m {name} kh√¥ng t√¨m th·∫•y."

            sizes = ProductSize.objects.filter(product=product)

            if not sizes.exists():
                return f"Th√¥ng tin s·∫£n ph·∫©m: {product.title}. Hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ k√≠ch c·ª° v√† gi√° c·∫£."

            size_info = "\n".join([f" \n Size {size.size} - {size.price}VNƒê " for size in sizes])
            response_text +=  f" üîé Th√¥ng tin gi√° c·ªßa {product.title} : \n{size_info} "
    return response_text

#L·∫§Y TH√îNG TIN S·∫¢N PH·∫®M
from unidecode import unidecode

def normalize_product_name(name: str) -> str:
    """Chu·∫©n h√≥a t√™n s·∫£n ph·∫©m, lo·∫°i b·ªè d·∫•u v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng."""
    return unidecode(name.strip().lower())

def get_similar_products(keyword: str, limit: int = 10):
    return Product.objects.filter(title__icontains=keyword).order_by('title')[:limit]

def replace_y_with_i(name: str) -> str:
    """Thay th·∫ø t·∫•t c·∫£ c√°c k√Ω t·ª± 'y' th√†nh 'i' trong chu·ªói."""
    name = unidecode(name.strip().lower())
    return name.replace('y', 'i').replace('Y', 'I')  # Thay th·∫ø c·∫£ ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng

def get_product_info_response(parameters: dict, field: str) -> str:
    """
    Tr·∫£ v·ªÅ th√¥ng tin c·ªßa s·∫£n ph·∫©m t·ª´ intent 'product.requestDescription' ho·∫∑c 'product.requestMaterial'.
    N·∫øu kh√¥ng t√¨m th·∫•y, g·ª£i √Ω 10 s·∫£n ph·∫©m t∆∞∆°ng t·ª± nh·∫•t.
    :param parameters: C√°c tham s·ªë t·ª´ ng∆∞·ªùi d√πng (bao g·ªìm t√™n s·∫£n ph·∫©m).
    :param field: T√™n tr∆∞·ªùng c·∫ßn l·∫•y ('description' ho·∫∑c 'material').
    :return: Th√¥ng tin m√¥ t·∫£ ho·∫∑c v·∫≠t li·ªáu c·ªßa s·∫£n ph·∫©m.
    """
    try:
        product_names = parameters.get("product-name", [])
        user_input = product_names[0].strip().lower() if product_names else ""

        if not user_input:
            return "üîé B·∫°n vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m ƒë·ªÉ m√¨nh m√¥ t·∫£ r√µ h∆°n nh√©!"

        # Chu·∫©n h√≥a t√™n ng∆∞·ªùi d√πng nh·∫≠p
        normalized_input = normalize_product_name(user_input)
        words = normalized_input.split()  # T√°ch t·ª´ theo kho·∫£ng tr·∫Øng
        max_words = 6  # T·ªëi ƒëa 6 t·ª´
        matched_products = None
        matched_products_2 = None

        # Ki·ªÉm tra l·∫ßn l∆∞·ª£t t·ª´ t·ªï h·ª£p 3 t·ª´, r·ªìi th√™m v√†o t·ª´ th·ª© 4, th·ª© 5, ... n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
        for i in range(3, min(max_words + 1, len(words) + 1)):
            search_term = " ".join(words[:i])  # T·∫°o t·ªï h·ª£p t√¨m ki·∫øm
            matched_products = Product.objects.filter(title__icontains=search_term)

            if matched_products.exists():
                break  # N·∫øu c√≥ k·∫øt qu·∫£, tho√°t kh·ªèi v√≤ng l·∫∑p

        # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ v·ªõi matched_products_2 (s·ª≠ d·ª•ng thay th·∫ø 'y' b·∫±ng 'i')
        if not matched_products or not matched_products.exists():
            normalized_input_2 = replace_y_with_i(normalized_input)
            words_2 = normalized_input_2.split()  # T√°ch t·ª´ c·ªßa normalized_input_2
            for i in range(3, min(max_words + 1, len(words_2) + 1)):
                search_term_2 = " ".join(words_2[:i])  # T·∫°o t·ªï h·ª£p t√¨m ki·∫øm cho matched_products_2
                matched_products_2 = Product.objects.filter(title__icontains=search_term_2)

                if matched_products_2.exists():
                    break  # N·∫øu c√≥ k·∫øt qu·∫£, tho√°t kh·ªèi v√≤ng l·∫∑p

        # N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        if not matched_products and not matched_products_2:
            similar_products = get_similar_products(normalized_input[:4])
            if not similar_products:
                return f"‚ùå M√¨nh kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o g·∫ßn gi·ªëng v·ªõi \"{user_input}\" c·∫£ üò•."

            suggestion_text = "\n‚Ä¢ " + "\n‚Ä¢ ".join([p.title for p in similar_products])
            return (
                f"ü§î M√¨nh ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m \"{user_input}\".\n"
                f"üîç Tuy nhi√™n, b·∫°n c√≥ mu·ªën xem c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± sau kh√¥ng:\n"
                f"{suggestion_text}\n\n"
                "üëâ H√£y n√≥i r√µ t√™n s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m ƒë·ªÉ m√¨nh m√¥ t·∫£ ch√≠nh x√°c h∆°n nh√©!"
            )

        # N·∫øu t√¨m th·∫•y ch√≠nh x√°c 1 s·∫£n ph·∫©m
        if matched_products and matched_products.count() == 1:
            product = matched_products.first()
            if not getattr(product, field):
                return f"‚ÑπÔ∏è S·∫£n ph·∫©m **{product.title}** hi·ªán ch∆∞a c√≥ th√¥ng tin {field} chi ti·∫øt."
            return f"üìÑ Th√¥ng tin s·∫£n ph·∫©m **{product.title}**:\n{getattr(product, field)}"

        # N·∫øu t√¨m th·∫•y ch√≠nh x√°c 1 s·∫£n ph·∫©m t·ª´ matched_products_2
        if matched_products_2 and matched_products_2.count() == 1:
            product = matched_products_2.first()
            if not getattr(product, field):
                return f"‚ÑπÔ∏è S·∫£n ph·∫©m **{product.title}** hi·ªán ch∆∞a c√≥ th√¥ng tin {field} chi ti·∫øt."
            return f"üìÑ Th√¥ng tin s·∫£n ph·∫©m **{product.title}**:\n{getattr(product, field)}"

        # N·∫øu c√≥ nhi·ªÅu s·∫£n ph·∫©m kh·ªõp
        product_list = "\n‚Ä¢ " + "\n‚Ä¢ ".join([p.title for p in matched_products])
        return (
            f"üßê B·∫°n ƒëang t√¨m s·∫£n ph·∫©m n√†o? C√≥ nhi·ªÅu s·∫£n ph·∫©m li√™n quan ƒë·∫øn \"{user_input}\":\n"
            f"{product_list}\n\n"
            "üëâ Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß t√™n s·∫£n ph·∫©m ƒë·ªÉ m√¨nh m√¥ t·∫£ ch√≠nh x√°c h∆°n nh√©!"
        )

    except Exception as e:
        print("L·ªñI M√î T·∫¢ S·∫¢N PH·∫®M:", e)
        return "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi truy xu·∫•t th√¥ng tin s·∫£n ph·∫©m. B·∫°n vui l√≤ng th·ª≠ l·∫°i sau nh√©!"


#L·∫§Y S·∫¢N PH·∫®M M·ªöI NH·∫§T
def get_newest_products():
    now = timezone.now()
    start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)

    # Gi·∫£ s·ª≠ model Product c√≥ tr∆∞·ªùng created_at
    newest_products = Product.objects.filter(created_at__gte=start_of_month).order_by('-created_at')

    if not newest_products.exists():
        return "Kh√¥ng c√≥ s·∫£n ph·∫©m m·ªõi trong th√°ng n√†y."

    response = "D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m m·ªõi nh·∫•t trong th√°ng n√†y:\n"
    for product in newest_products:
        response += f"- {product.name}\n"

    return response

def get_menu():
    products = Product.objects.all()
    if products.exists():
        response_text = "Danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m:\n"
        for product in products:
            response_text += f"- {product.title}"
    else:
        response_text = "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o."
    return response_text

def get_cate_menu(cate):
    #Ki·ªÉm tra xem cate c√≥ gi√° tr·ªã hay kh√¥ng v√¨ cate l√† m·∫£ng n√™n
    if cate != None:
        for i in cate:
            cate_name = Category.objects.get(cate_id=i).name
            products = Product.objects.filter(category_id=i)
            if products.exists():
                response_text = f"Danh s√°ch s·∫£n ph·∫©m thu·ªôc danh m·ª•c * {cate_name} *: \n"
                for product in products:
                    response_text += f" - {product.title} - "
            else:
                response_text = f"Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o thu·ªôc danh m·ª•c {i}."
    else:
        products = Product.objects.all()
        if products.exists():
            response_text = "Danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m:\n"
            for product in products:
                response_text += f" - {product.title} - "
        else:
            response_text = "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o."
        
    return response_text

#Function About Cart
def get_view_cart(username):
    try:
        user = User.objects.get(username=username)
    except ObjectDoesNotExist:
        return "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."

    cart_items = CartItem.objects.filter(user=user)[:5]

    if cart_items:
        response_text = "üõí Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng:\n"
        total_quantity = 0
        total_price = 0

        for item in cart_items:
            product = item.product
            size_value = item.size  # v√≠ d·ª•: 'M', 'L'

            # T√¨m ProductSize t∆∞∆°ng ·ª©ng
            try:
                product_size = ProductSize.objects.get(product=product, size=size_value)
                price = product_size.price
            except ProductSize.DoesNotExist:
                price = 0  # ho·∫∑c x·ª≠ l√Ω l·ªói kh√°c n·∫øu mu·ªën

            quantity = item.quantity
            subtotal = price * quantity

            total_quantity += quantity
            total_price += subtotal

            response_text += (
                f"- {product.title} (Size: {size_value}), "
                f"Gi√°: {price:,} VNƒê, "
                f"S·ªë l∆∞·ª£ng: {quantity}, "
                f"Th√†nh ti·ªÅn: {subtotal:,} VNƒê\n"
            )

        response_text += f"\nüì¶ T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m: {total_quantity}"
        response_text += f"\nüí∞ T·ªïng s·ªë ti·ªÅn: {total_price:,} VNƒê"
    else:
        response_text = "üõí Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng."

    return response_text



#H√ÄM TH√äM V√ÄO GI·ªé H√ÄNG
def add_to_cart(username, product_name, size, quantity):
    """
    Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng v·ªõi k√≠ch c·ª° v√† s·ªë l∆∞·ª£ng c·ª• th·ªÉ.
    N·∫øu s·∫£n ph·∫©m ho·∫∑c k√≠ch c·ª° kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ th√¥ng b√°o l·ªói.
    """
    quantity = int(quantity)
    # Ki·ªÉm tra s·∫£n ph·∫©m
    product = checkProduct_custom(product_name)
    if not product:
        return (
            f"Th·∫≠t kh√¥ng may s·∫£n ph·∫©m **{product_name}** kh√¥ng t·ªìn t·∫°i trong c·ª≠a h√†ng nha!! "
            "B·∫°n vui l√≤ng ch·ªçn l·∫°i s·∫£n ph·∫©m kh√°c nh√©!"
        )

    # Ki·ªÉm tra size
    sizes = ProductSize.objects.filter(product=product)
    if not sizes.exists():
        return f"S·∫£n ph·∫©m **{product.title}** hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ k√≠ch c·ª°."

    # Danh s√°ch size c√≥ s·∫µn
    available = {sz.size: sz.price for sz in sizes}
    if size not in available:
        # Th√¥ng b√°o c√°c size v√† gi√° ti·ªÅn
        size_info = "\n".join([f"- Size {s}: {p:,} VNƒê" for s, p in available.items()])
        return (
            f"S·∫£n ph·∫©m **{product.title}** kh√¥ng c√≥ size **{size}**. "
            f"Hi·ªán t·∫°i c·ª≠a h√†ng ch·ªâ c√≥ c√°c size sau v·ªõi gi√° nh∆∞ sau:\n{size_info}"
        )

    # L·∫•y user
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        return "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."

    # Th√™m ho·∫∑c c·∫≠p nh·∫≠t CartItem
    cart_item, created = CartItem.objects.get_or_create(
        user=user,
        product=product,
        size=size
    )
    if created:
        cart_item.quantity = quantity
        response_text = f"ƒê√£ th√™m {quantity} x {product.title} (Size: {size}) v√†o gi·ªè h√†ng."
    else:
        cart_item.quantity += quantity
        response_text = (
            f"{product.title} (Size: {size}) ƒë√£ c√≥ trong gi·ªè h√†ng, "
            f"s·ªë l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh {cart_item.quantity}."
        )

    cart_item.save()
    return response_text

    
#     return response_text
def update_cart_quantity(username, product_name, size, quantity):
    # √©p ki·ªÉu s·ªë l∆∞·ª£ng
    quantity = int(quantity)
    products = checkProduct(product_name)

    if not products.exists():
        return f"S·∫£n ph·∫©m **{product_name}** kh√¥ng t·ªìn t·∫°i trong c·ª≠a h√†ng."

    product = products.first()
    user = User.objects.get(username=username)
    # L·∫•y t·∫•t c·∫£ CartItem c·ªßa product n√†y
    cart_items = CartItem.objects.filter(user=user, product=product)
    if not cart_items.exists():
        return f"S·∫£n ph·∫©m **{product.title}** ch∆∞a c√≥ trong gi·ªè h√†ng."

    # L·∫•y c√°c size ƒëang c√≥ trong gi·ªè
    existing_sizes = [ci.size for ci in cart_items]
    # N·∫øu ch·ªâ c√≥ 1 size duy nh·∫•t
    if len(existing_sizes) == 1:
        ci = cart_items.first()
        ci.quantity = quantity
        ci.save()
        return f"ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c·ªßa **{product.title}** (Size: {ci.size}) th√†nh {quantity}."
    
    # N·∫øu c√≥ nhi·ªÅu h∆°n 1 size
    if not size:
        # ng∆∞·ªùi d√πng ch∆∞a ghi size
        available = ", ".join(existing_sizes)
        return (
            f"Hi·ªán t·∫°i gi·ªè h√†ng c·ªßa b·∫°n c√≥ {product.title} v·ªõi c√°c size: {available}.\n"
            "Vui l√≤ng cho bi·∫øt size c·ª• th·ªÉ ƒë·ªÉ m√¨nh c·∫≠p nh·∫≠t ch√≠nh x√°c."
        )
    # ng∆∞·ªùi d√πng c√≥ g·ª≠i size
    if size not in existing_sizes:
        return f"S·∫£n ph·∫©m **{product.title}** kh√¥ng c√≥ size **{size}** trong gi·ªè h√†ng."
    # c·∫≠p nh·∫≠t ƒë√∫ng b·∫£n ghi
    ci = cart_items.get(size=size)
    ci.quantity = quantity
    ci.save()
    return f"ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c·ªßa **{product.title}** (Size: {size}) th√†nh {quantity}."


def remove_from_cart(username, product_name):
    products = checkProduct(product_name)
    
    if products.exists():
        product = products.first()
        user = User.objects.get(username=username)
        cart_item = CartItem.objects.filter(user=user, product=product).first()
        
        if cart_item:
            cart_item.delete()
            response_text = f"ƒê√£ x√≥a {product.title} kh·ªèi gi·ªè h√†ng."
        else:
            response_text = f"S·∫£n ph·∫©m {product.title} kh√¥ng c√≥ trong gi·ªè h√†ng."
    else:
        response_text = "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!"
    
    return response_text

def check_cart_item_exists(username, product_name):
    products = checkProduct(product_name)
    if not products.exists():
        return False

    product = products.first()
    user = User.objects.get(username=username)
    return CartItem.objects.filter(user=user, product=product).exists()


def handle_product_deletion(username, product_name, size=None):
    products = checkProduct(product_name)
    if not products.exists():
        return f"S·∫£n ph·∫©m **{product_name}** kh√¥ng t·ªìn t·∫°i!"

    product = products.first()
    user = User.objects.filter(username=username).first()
    if not user:
        return f"T√†i kho·∫£n **{username}** kh√¥ng t·ªìn t·∫°i."

    # Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng kh√¥ng
    cart_items = CartItem.objects.filter(user=user, product=product)
    if not cart_items.exists():
        return f"S·∫£n ph·∫©m **{product.title}** kh√¥ng c√≥ trong gi·ªè h√†ng."

    # N·∫øu c√≥ nh·∫≠p size
    if size:
        deleted = cart_items.filter(size=size).delete()
        if deleted[0] > 0:
            return f"‚úÖ ƒê√£ x√≥a **{product.title} - Size {size}** kh·ªèi gi·ªè h√†ng."
        else:
            return f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y **{product.title} - Size {size}** trong gi·ªè h√†ng."

    # N·∫øu kh√¥ng nh·∫≠p size ‚Üí ph·∫£n h·ªìi c√°c size hi·ªán c√≥
    sizes_in_cart = cart_items.values_list('size', flat=True)
    sizes = list(set(sizes_in_cart))
    size_list_str = ", ".join(sizes)

    return (
        f"üõí S·∫£n ph·∫©m **{product.title}** trong gi·ªè h√†ng c√≥ c√°c size: {size_list_str}.\n"
        f"B·∫°n mu·ªën:\n"
        f"1. X√≥a **t·∫•t c·∫£ c√°c size** c·ªßa {product.title}\n"
        f"2. X√≥a **c√°c size c·ª• th·ªÉ**\n"
        f"üëâ Vui l√≤ng ph·∫£n h·ªìi theo c√∫ ph√°p: `XOASIZE@{product.title}-[size1,size2,...]` VD: XOASIZE@{product.title}-[XL,S]"
    )



def hoan_thanh_don(username, email, address):
    print("ƒê·∫∑t h√†ng")
    try:
        user = User.objects.get(username=username)
        cart_items = CartItem.objects.filter(user=user)

        if not cart_items.exists():
            response_text = "Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi ƒë·∫∑t h√†ng."
        else:
            # T√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa gi·ªè h√†ng
            total_amount = sum(item.product.price * item.quantity for item in cart_items)
            total_amount = int(total_amount)
            # Th·ª±c hi·ªán giao d·ªãch (Transaction) ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
            hoa_don = HoaDon.objects.create(
                user=user,
                tongTien=total_amount,
                email=email,
                diaChi=address
            )

            # L∆∞u chi ti·∫øt ƒë∆°n h√†ng
            for item in cart_items:
                Detail.objects.create(
                    hoaDon=hoa_don,
                    user=user,
                    product=item.product,
                    quantity=item.quantity
                )

            # X√≥a c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
            cart_items.delete()
            response_text = f"ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! M√£ ƒë∆°n h√†ng c·ªßa b·∫°n l√†: {hoa_don.maHoaDon}"
    except Exception as e:
        print("Error in Dat_hang function:", e)  # In l·ªói ra console
        response_text = "C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau."
    return response_text

#Function About User
def getEmail(username):
    return User.objects.get(username=username).email


def checkUserName(username_input):
    return User.objects.filter(username=username_input).exists()
    
def extract_username(username):
    match = re.match(r'UN@([A-Za-z0-9_.]+)', username)
    extracted_username = match.group(1) if match else username
    return extracted_username

# X·ª¨ L√ù CH√çNH S√ÅCH

#L·∫§Y T·∫§T C·∫¢ CH√çNH S√ÅCH
def get_policy_all():
    policies = Policy.objects.all()
    if policies.exists():
        response_text = "Danh s√°ch ch√≠nh s√°ch:\n"
        for policy in policies:
            response_text += f" - üìù {policy.title}: {policy.content}\n"
    else:
        response_text = "Kh√¥ng c√≥ ch√≠nh s√°ch n√†o."
    return response_text

# X·ª¨ L√ù CH√çNH S√ÅCH THEO T√äN PARAMETER (KEY)
### L√Ä DO CH√öNG TA T·∫†O RI√äNG CHO M·ªñI THU·ªòC T√çNH L√Ä 1 ENTITIES DO ƒê√ì KHI N√ì TR·∫¢ V·ªÄ TH√å N√ì S·∫º L√Ä 1 T·ª™ KH√ÅC M√Ä MODEL T·ª∞ NH·∫¨N BI·∫æT N√äN KH D√ôNG VALUE M·∫∂C ƒê·ªäNH ƒê∆Ø·ª¢C
def extract_policy_keys(parameters: dict) -> list:
    """
    Tr√≠ch ra c√°c key h·ª£p l·ªá t·ª´ parameters (vd: policy-promotion -> promotion),
    n·∫øu value c·ªßa ch√∫ng l√† True ho·∫∑c t·ªìn t·∫°i.
    """
    return [
        key.replace("policy-", "") 
        for key, value in parameters.items()
        if key.startswith("policy-") and value
    ]

def get_policies_response(parameters: dict) -> str:
    """
    Truy v·∫•n c√°c ch√≠nh s√°ch t·ª´ c√°c key c√≥ ti·ªÅn t·ªë "policy-" v√† tr·∫£ v·ªÅ n·ªôi dung ch√≠nh s√°ch.
    """
    policy_types = extract_policy_keys(parameters)
    response_parts = []

    for policy_type in policy_types:
        try:
            policy = Policy.objects.get(type=policy_type)
            response_parts.append(f"- ‚è∞ {policy.title} :\n{policy.content}")
        except Policy.DoesNotExist:
            response_parts.append(f"Kh√¥ng t√¨m th·∫•y ch√≠nh s√°ch: {policy_type}")

    return "\n\n".join(response_parts) if response_parts else "Hi·ªán ch∆∞a c√≥ th√¥ng tin ch√≠nh s√°ch ph√π h·ª£p."


# # X·ª¨ L√ù CH√çNH S√ÅCH THEO GI√Å TR·ªä (VALUE)
# def extract_policy_values(parameters: dict) -> list:
#     """Tr·∫£ v·ªÅ danh s√°ch c√°c gi√° tr·ªã (policy types) c√≥ t·ªìn t·∫°i."""
#     return [value for value in parameters.values() if value]

# def get_policies_response(parameters: dict) -> str:
#     """Truy v·∫•n c√°c ch√≠nh s√°ch t·ª´ c√°c gi√° tr·ªã parameter v√† tr·∫£ v·ªÅ n·ªôi dung."""
#     valid_values = extract_policy_values(parameters)
#     response_parts = []

#     for policy_type in valid_values:
#         try:
#             # L·∫•y ch√≠nh s√°ch t·ª´ model Policy
#             policy = Policy.objects.get(type=policy_type)
#             response_parts.append(f"- {policy.title} : \n{policy.content}")
#         except Policy.DoesNotExist:
#             # Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ch√≠nh s√°ch
#             response_parts.append(f"Kh√¥ng t√¨m th·∫•y ch√≠nh s√°ch: {policy_type}")

#     return "\n\n".join(response_parts) if response_parts else "Hi·ªán ch∆∞a c√≥ th√¥ng tin ch√≠nh s√°ch ph√π h·ª£p."

# X·ª¨ L√ù SHOPINFO
def format_shop_info(info_type: str, shop: ShopInfo) -> str:
    if info_type in ["open_time"]:
        return f"‚è∞ Gi·ªù m·ªü c·ª≠a: {shop.open_time.strftime('%H:%M')}"
    elif info_type in ["close_time"]:
        return f"‚è∞ Gi·ªù ƒë√≥ng c·ª≠a: {shop.close_time.strftime('%H:%M')}"
    elif info_type in ["address"]:
        return f"üìç ƒê·ªãa ch·ªâ: {shop.address}"
    elif info_type in ["phone"]:
        return f"üìû S·ªë ƒëi·ªán tho·∫°i: {shop.phone}"
    elif info_type in ["website"]:
        return f"üåê Website: {shop.website}"
    elif info_type in ["email"]:
        return f"‚úâÔ∏è Email: {shop.email}"
    elif info_type in ["zalo_link"]:
        return f"üì± Zalo: {shop.zalo_link}"
    elif info_type in ["facebook_link"]:
        return f"üìò Facebook: {shop.facebook_link}"
    elif info_type in ["ship_available"]:
        return "üöö C·ª≠a h√†ng c√≥ h·ªó tr·ª£ giao h√†ng." if shop.ship_available else "üö´ C·ª≠a h√†ng kh√¥ng h·ªó tr·ª£ giao h√†ng."
    elif info_type in ["is_open_weekend"]:
        return "üóìÔ∏è C·ª≠a h√†ng m·ªü c·ª≠a c·∫£ cu·ªëi tu·∫ßn." if shop.is_open_weekend else "‚õî C·ª≠a h√†ng kh√¥ng ho·∫°t ƒë·ªông cu·ªëi tu·∫ßn."
    else:
        return ""
    
def get_shop_info_response(parameters: dict) -> str:
    info_types = parameters.get("shop-info-type", [])
    try:
        shop = ShopInfo.objects.filter(is_active=True).first()
        print("SHOP:", shop)
        if not shop:
            return "Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y th√¥ng tin c·ª≠a h√†ng."

        response_parts = []
        for info_type in info_types:
            print("X·ª¨ L√ù:", info_type)
            response_parts.append(format_shop_info(info_type, shop))

        return "\n".join(response_parts) if response_parts else "Kh√¥ng t√¨m th·∫•y th√¥ng tin b·∫°n y√™u c·∫ßu."

    except Exception as e:
        print("L·ªñI:", e)
        return "ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin c·ª≠a h√†ng."


def handle_username_response(session, username, exists):
    """X·ª≠ l√Ω ph·∫£n h·ªìi cho username"""
    if exists:
        # N·∫øu username t·ªìn t·∫°i, x·ª≠ l√Ω v√† c·∫≠p nh·∫≠t context
        response_text = f"Ch√†o m·ª´ng qu√Ω kh√°ch quay tr·ªü l·∫°i: {username}. H√£y cho m√¨nh bi·∫øt b·∫°n c·∫ßn g√¨ nh√©!"

        # C·∫≠p nh·∫≠t context v·ªõi gi√° tr·ªã username
        response = {
            "fulfillmentText": response_text,
            "outputContexts": [
                {
                    "name": f"{session}/contexts/information",
                    "lifespanCount": 5,
                    "parameters": {
                        "Username": username
                    }
                }
            ]
        }
    else:
        # N·∫øu username kh√¥ng t·ªìn t·∫°i, x√≥a context v√† parameter
        response_text = "C√≥ v·∫ª nh∆∞ kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†y r·ªìi!!!. Vui l√≤ng nh·∫≠p l·∫°i t√™n ng∆∞·ªùi nh√°!" \
        "D√πng theo c√∫ ph√°p: UN@[username] " \
        "( Ex: username: FBshop -> UN@FBshop )"

        # X√≥a context b·∫±ng c√°ch kh√¥ng th√™m v√†o ph·∫£n h·ªìi
        response = {
            "fulfillmentText": response_text,
            "outputContexts": [
                {
                    "name": f"{session}/contexts/information",
                    "lifespanCount": 0  # Thay ƒë·ªïi lifespanCount th√†nh 0 ƒë·ªÉ x√≥a context
                }
            ]
        }

    return response

def get_context_parameter(output_contexts, context_name, parameter_name):
    """L·∫•y gi√° tr·ªã parameter t·ª´ context"""
    for context in output_contexts:
        if context_name in context.get('name', ''):
            return context.get('parameters', {}).get(parameter_name)
    return None

# ADDRESS
def extract_address(address):
    match = re.search(r'ADDRESS@\[(?P<address>[^\]]+)\]', address)
    if match:
        return match.group('address')
    return None

def handle_address_response(session, extracted_address, more_info):
    if extracted_address:
        response_text = f"ƒê·ªãa ch·ªâ c·ªßa b·∫°n l√†: {extracted_address}.\n"
        response_text += f"{more_info}"

        response = {
            "fulfillmentText": response_text,
            "outputContexts": [
                {
                    "name": f"{session}/contexts/provide-address",
                    "lifespanCount": 5,
                    "parameters": {
                        "address": extracted_address
                    }
                }
            ]
        }
    else:
        response_text = "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i."

        response = {
            "fulfillmentText": response_text,
            "outputContexts": [
                {
                    "name": f"{session}/contexts/provide-address",
                    "lifespanCount": 0
                }
            ]
        }

    return response 

def handle_multiple_deletions(username, deletion_commands):
    response_text = ""

    for command in deletion_commands:
        # T√°ch t√™n s·∫£n ph·∫©m v√† danh s√°ch size
        product_name, size_list = parse_delete_size_command(command)
        if not product_name or not size_list:
            response_text += f"‚ö†Ô∏è S·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa m√¨nh kh√¥ng c√≥ size: `{command}`\n"
            continue

        # X·ª≠ l√Ω x√≥a cho m·ªói s·∫£n ph·∫©m v√† size
        result = handle_multi_size_deletion(username, product_name, size_list)
        response_text += result + "\n"
    
    return response_text.strip()

def handle_multi_size_deletion(username, product_name, size_list):
    product = checkProduct_custom(product_name)
    if not product:
        return f"‚ùå S·∫£n ph·∫©m **{product_name}** kh√¥ng t·ªìn t·∫°i."

    user = User.objects.filter(username=username).first()
    if not user:
        return f"‚ùå T√†i kho·∫£n **{username}** kh√¥ng t·ªìn t·∫°i."

    cart_items = CartItem.objects.filter(user=user, product=product)
    if not cart_items.exists():
        return f"‚ùå S·∫£n ph·∫©m **{product.title}** kh√¥ng c√≥ trong gi·ªè h√†ng."

    # Ki·ªÉm tra n·∫øu size_list ch·ª©a "ALL"
    if "ALL" in size_list:
        deleted = cart_items.delete()  # X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
        if deleted[0] > 0:
            return f"‚úÖ ƒê√£ x√≥a to√†n b·ªô s·∫£n ph·∫©m **{product.title}** kh·ªèi gi·ªè h√†ng."
        else:
            return f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m **{product.title}** trong gi·ªè h√†ng."

    # N·∫øu kh√¥ng c√≥ "ALL", x√≥a c√°c size c·ª• th·ªÉ
    response_text = ""
    for size in size_list:
        deleted = cart_items.filter(size=size).delete()
        if deleted[0] > 0:
            response_text += f"‚úÖ ƒê√£ x√≥a **{product.title} - Size {size}** kh·ªèi gi·ªè h√†ng.\n"
        else:
            response_text += f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y **{product.title} - Size {size}** trong gi·ªè h√†ng.\n"

    return response_text.strip()

#Test l·ªánh t√°ch name, size = parse_delete_size_command('XOASIZE@c√† ph√™ s·ªØa ƒë√°-[S,M]') print(name, size)
def parse_delete_size_command(command):
    # M√£ n√†y d√πng ƒë·ªÉ ph√¢n t√°ch l·ªánh nh∆∞ XOASIZE@c√† ph√™ s·ªØa ƒë√°-[S,M]
    try:
        parts = command.split('@')
        if len(parts) != 2:
            return None, None
        
        product_name = parts[1].split('-')[0].strip()
        size_str = parts[1].split('-')[1].strip('[]')
        size_list = size_str.split(',')
        
        return product_name, size_list
    except Exception as e:
        return None, None




@csrf_exempt
def dialogflow_webhook(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            #In to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
            print("Received data:", data)

            query_result = data.get('queryResult', {})
            parameters = query_result.get('parameters', {})
            output_contexts = query_result.get('outputContexts', [])

            intent = query_result.get('intent', {})
            intent_name = intent.get('displayName', '')
            print("Received intent name:", intent_name)  # Debugging line

            #X·ª≠ l√≠ theo t·ª´ng intent
            if intent_name == 'requestMenu':
                response_text = get_cate_menu(None)
            elif intent_name == 'menu.requestFood':
                response_text = get_cate_menu(cate=[2,3])
            elif intent_name == 'menu.requestBeverage':
                response_text = get_cate_menu(cate=[1])
            elif intent_name == 'menu.requestCombo':
                response_text = get_cate_menu(cate=[5])
            

            elif intent_name == 'GetProductDetails':
                product_name = parameters.get('product-name')  # Extract from list
                print("Received product name:", product_name)  # Debugging line
                response_text = get_product_details(product_name)
            elif intent_name == 'requestProductPrice':
                product_name = parameters.get('product-name')
                print("Received product name:", product_name)
                response_text = get_product_price(product_name)
            elif intent_name == 'product.requestDescription':
                response_text = get_product_info_response(parameters, field='description')
            elif intent_name == 'product.requestMaterial':
                response_text = get_product_info_response(parameters, field='material')
            elif intent_name == 'product.requestStorageIntroduction':
                response_text = get_product_info_response(parameters, field='storage_instruction')

                
            # elif intent_name == 'requestNewestProducts':
            elif intent_name == 'requestDeleteProduct':
                product_name = parameters.get('product-name')
                print("Received product name:", product_name)
            
            elif intent_name == 'InputUsername':
                username = parameters.get('Username', '')

                # Tr√≠ch xu·∫•t gi√° tr·ªã cho format c·ªßa username UN@username
                extracted_username = extract_username(username)
                # Test result after extracting username
                print("Extracted username:", extracted_username)  # Debugging line
                user_exists = checkUserName(extracted_username)
        
                response = handle_username_response(data.get('session'), extracted_username, user_exists)
                return JsonResponse(response)
            
            elif intent_name == 'requestViewCart':
                information_context_exists = any('information' in context.get('name', '') for context in output_contexts)
                print("Status username input:", information_context_exists)  # Debugging line
                if information_context_exists:

                    username = get_context_parameter(output_contexts, 'information', 'Username')

                    print("Received username:", username)  # Debugging line
                    response_text = get_view_cart(username)

                else:
                    response_text = "Vui l√≤ng nh·∫≠p Username theo c√∫ ph√°p: UN@[username] ( Ex: username: FBshop -> UN@FBshop ) r·ªìi y√™u c·∫ßu l·∫°i nh√©!" 
            
            elif intent_name == 'requestProductOrder':
                information_context_exists = any('information' in context.get('name', '') for context in output_contexts)
                if information_context_exists:
                    username = get_context_parameter(output_contexts, 'information', 'Username')
                    product_names = parameters.get('product-name', [])
                    quantities = parameters.get('number', [])
                    sizes = parameters.get('size', [])
                    response_text = ""
                    for product_name, size, quantity in zip(product_names, sizes, quantities):
                        response_text += add_to_cart(username, product_name, size, quantity) + "\n"
                else:
                    response_text = "Vui l√≤ng nh·∫≠p Username theo c√∫ ph√°p: UN@[username] ( Ex: username: FBshop -> UN@FBshop ) "                
            
            elif intent_name == 'order.DeleteMultipleProducts':
                # L·∫•y danh s√°ch c√°c l·ªánh x√≥a t·ª´ parameters (ƒë√£ chu·∫©n)
                deletion_commands = parameters.get('deleteProduct')
                print("Received deletion commands:", deletion_commands)  # Debugging line

                if not deletion_commands:
                    response_text = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªánh x√≥a h·ª£p l·ªá."
                else:
                    # L·∫•y username t·ª´ context
                    username = get_context_parameter(output_contexts, 'information', 'Username')
                    # G·ªçi h√†m x·ª≠ l√Ω c√°c l·ªánh x√≥a nhi·ªÅu s·∫£n ph·∫©m
                    response_text = handle_multiple_deletions(username, deletion_commands)

            
            elif intent_name == 'order.DeleteProduct':
                information_context_exists = any('information' in context.get('name', '') for context in output_contexts)
                
                if information_context_exists:
                    username = get_context_parameter(output_contexts, 'information', 'Username')
                    product_names = parameters.get('product-name', [])
                    size = parameters.get('size')  # N·∫øu b·∫°n c√≥ entity `size` trong Dialogflow

                    response_text = ""
                    for product_name in product_names:
                        result = handle_product_deletion(username, product_name, size)
                        response_text += result + "\n"

                else:
                    response_text = (
                        "‚ùó Vui l√≤ng nh·∫≠p Username theo c√∫ ph√°p: `UN@[username]` "
                        "(V√≠ d·ª•: Username l√† FBshop ‚Üí `UN@FBshop`)"
                    )


            elif intent_name == 'order.UpdateProduct':
                information_context_exists = any('information' in context.get('name', '') for context in output_contexts)
                
                if information_context_exists:
                    username = get_context_parameter(output_contexts, 'information', 'Username')
                    product_names = parameters.get('product-name', [])
                    sizes       = parameters.get('size', [])
                    quantities = parameters.get('number', [])
                    print("Product name:", product_name)  # Debugging line
                    print("Quantities:", quantities)  # Debugging line

                    response_text = ""
                    for pname, sz, qty in zip(product_names, sizes, quantities):
                        response_text += update_cart_quantity(username, pname, sz, qty) + "\n"
                
                else: 
                    response_text = "Vui l√≤ng nh·∫≠p Username theo c√∫ ph√°p: UN@[username] ( Ex: username: FBshop -> UN@FBshop ) "
            elif intent_name == 'order.InputAddress':
                # L·∫•y chi t·ª´ context
                username = get_context_parameter(output_contexts, 'information', 'Username')
                print("Received username:", username)

                address = parameters.get('address', '')
                # Tr√≠ch xu·∫•t gi√° tr·ªã cho format c·ªßa address ADDRESS@[address]
                extracted_address = extract_address(address)
                response_text = ''
                
                # Test result after extracting
                
                print("Extracted address:", extracted_address)  
                response_text += f"T√™n t√†i kho·∫£n: {username}.\n"
                email = getEmail(username)
                response_text += f"Email: {email}.\n"
                donHang = get_view_cart(username)
                response_text += f"ƒê∆°n h√†ng c·ªßa b·∫°n: {donHang}.\n"
                response_text += f"ƒê·ªãa ch·ªâ c·ªßa b·∫°n: {extracted_address}.\n"
                response_text += "X√°c nh·∫≠n th√¥ng tin tr√™n ƒë·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng. YES/NO"
                response = handle_address_response(data.get('session'), extracted_address, response_text)
                return JsonResponse(response)
            
            elif intent_name == 'order.Confirm_Information':
                username = get_context_parameter(output_contexts, 'information', 'Username')
                address = get_context_parameter(output_contexts, 'provide-address', 'address')
                print("Received username:", username)
                print("Received address:", address)

                response_text = ''
                email = getEmail(username)
                print(email)
                
                response_text = hoan_thanh_don(username, email, address)

            # elif intent_name == 'requestNewestProducts':
            # INTENT CH√çNH S√ÅCHS√ÅCH
            elif intent_name == 'requestPolicy-All':
                response_text = get_policy_all()
            elif intent_name == 'requestPolicy-One':
                response_text = get_policies_response(parameters)

            # INTENT TH√îNG TIN C·ª¨A H√ÄNG
            elif intent_name == 'requestShopInfo':
                response_text = get_shop_info_response(parameters)
            else:    
                response_text = "Kh√¥ng c√≥ th√¥ng tin h·ª£p l·ªá."
            print("Response text:", response_text)  # Debugging line

            response = {
                'fulfillmentText': response_text
            }

            return JsonResponse(response)
        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON format'}, status=400)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    return JsonResponse({'error': 'Invalid request method'}, status=405)

@login_required
def webhook(request):
    # request.session['user_id'] = request.user.id
    return render(request, 'shop/chatboxAI.html', {'user_id': request.user.id})

